const int buzzer = 8; // Passive buzzer pin

// Frequencies for the notes - octave 5 (one octave higher)
#define NOTE_C5  523
#define NOTE_D5  587
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_G5  784
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1046  // High C note

// Melody (Happy Birthday to Tamim) with octave 5 notes
int melody[] = {
  // Happy birthday to you
  NOTE_C5, NOTE_C5, NOTE_D5, NOTE_C5, NOTE_F5, NOTE_E5,
  // Happy birthday to you
  NOTE_C5, NOTE_C5, NOTE_D5, NOTE_C5, NOTE_G5, NOTE_F5,
  // Happy birthday dear Tamim
  NOTE_C5, NOTE_C5, NOTE_C6, NOTE_A5, NOTE_F5, NOTE_E5, NOTE_D5,
  // Happy birthday to you
  NOTE_AS5, NOTE_A5, NOTE_F5, NOTE_G5, NOTE_F5
};

// Durations (4 = quarter note, 8 = eighth note)
int noteDurations[] = {
  // Line 1
  4, 8, 4, 4, 4, 2,
  // Line 2
  4, 8, 4, 4, 4, 2,
  // Line 3
  4, 8, 4, 4, 4, 4, 2,
  // Line 4
  8, 8, 4, 4, 2
};

void playTone(int frequency, int duration) {
  if (frequency == 0) {
    delay(duration);
    return;
  }

  long period = 1000000L / frequency;  // microseconds per wave cycle
  long cycles = (long)duration * 1000L / period;

  long onTime = period / 5;   // 20% duty cycle for quieter sound
  long offTime = period - onTime;

  for (long i = 0; i < cycles; i++) {
    digitalWrite(buzzer, HIGH);
    delayMicroseconds(onTime);
    digitalWrite(buzzer, LOW);
    delayMicroseconds(offTime);
  }
}

void setup() {
  pinMode(buzzer, OUTPUT);
}

void loop() {
  int notesCount = sizeof(melody) / sizeof(melody[0]);
  for (int thisNote = 0; thisNote < notesCount; thisNote++) {
    int noteDuration = 1000 / noteDurations[thisNote];
    playTone(melody[thisNote], noteDuration);
    delay(noteDuration * 0.3);  // short pause between notes
  }

  delay(2000);  // 2-second pause before repeating the song
}
